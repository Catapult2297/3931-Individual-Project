File {
    shebang: None,
    attrs: [],
    items: [
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    add_one,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    x,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                i32,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Type(
                    RArrow,
                    Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident(
                                        i32,
                                    ),
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                ),
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Expr(
                        Expr::Return {
                            attrs: [],
                            return_token: Return,
                            expr: Some(
                                Expr::Binary {
                                    attrs: [],
                                    left: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        x,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    op: BinOp::Add(
                                        Plus,
                                    ),
                                    right: Expr::Paren {
                                        attrs: [],
                                        paren_token: Paren,
                                        expr: Expr::Cast {
                                            attrs: [],
                                            expr: Expr::Lit {
                                                attrs: [],
                                                lit: Lit::Int {
                                                    token: 1,
                                                },
                                            },
                                            as_token: As,
                                            ty: Type::Path {
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident(
                                                                i32,
                                                            ),
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                    },
                                },
                            ),
                        },
                        Some(
                            Semi,
                        ),
                    ),
                ],
            },
        },
    ],
}